// -*- C++ -*-
//
// generated by wxGlade HG on Sat May 24 09:35:14 2014
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include <wx/wx.h>
#include "MyFrame.h"

// begin wxGlade: ::extracode
// end wxGlade


MyFrame::MyFrame(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: MyFrame::MyFrame
    panel_1 = new wxPanel(this, wxID_ANY);
    splitter = new wxSplitterWindow(panel_1, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3D|wxSP_BORDER);
    notebook_1 = new wxNotebook(splitter, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxNB_BOTTOM);
    panel_environment = new wxPanel(notebook_1, wxID_ANY);
    panel_explorer = new wxPanel(notebook_1, wxID_ANY);
    window_1 = new wxSplitterWindow(panel_explorer, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3DBORDER|wxSP_BORDER);
    window_1_pane_2 = new wxPanel(window_1, wxID_ANY);
    window_1_pane_1 = new wxPanel(window_1, wxID_ANY);
    panel_log = new wxPanel(notebook_1, wxID_ANY);
    panel_cpvr = new wxPanel(panel_1, wxID_ANY);
    menubar = new wxMenuBar();
    wxMenu* fileMenu = new wxMenu();
    fileMenu->Append(mnuNewID, _("&New ebuild\tCtrl-n"), wxEmptyString, wxITEM_NORMAL);
    fileMenu->Append(mnuLoadOverlayID, _("L&oad ebuild from PORTDIR_OVERLAY"), wxEmptyString, wxITEM_NORMAL);
    fileMenu->Append(mnuLoadID, _("&Load ebuild from PORTDIR"), wxEmptyString, wxITEM_NORMAL);
    fileMenu->Append(mnuSaveID, _("&Save ebuild\tCtrl-S"), wxEmptyString, wxITEM_NORMAL);
    fileMenu->Append(mnuDelID, _("&Delete this ebuild"), wxEmptyString, wxITEM_NORMAL);
    fileMenu->Append(mnuExportID, _("&Export ebuild and aux files to tar"), wxEmptyString, wxITEM_NORMAL);
    fileMenu->Append(exitID, _("E&xit\tAlt-X"), wxEmptyString, wxITEM_NORMAL);
    menubar->Append(fileMenu, _("&File"));
    wxMenu* wxglade_tmp_menu_1 = new wxMenu();
    wxglade_tmp_menu_1->Append(mnuFindID, _("&Find\tCtrl-F"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(mnuFindAgainID, _("Find a&gain\tCtrl-g"), wxEmptyString, wxITEM_NORMAL);
    menubar->Append(wxglade_tmp_menu_1, _("&Edit"));
    wxMenu* wxglade_tmp_menu_2 = new wxMenu();
    wxglade_tmp_menu_2->Append(mnuAddFuncID, _("&Function\tF6"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_2->Append(mnuLicenseID, _("&License"), wxEmptyString, wxITEM_NORMAL);
    menubar->Append(wxglade_tmp_menu_2, _("&Insert"));
    wxMenu* wxglade_tmp_menu_3 = new wxMenu();
    wxglade_tmp_menu_3->Append(mnuCleanID, _("&Clean\tShift-F1"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuDigestID, _("&Digest\tF1"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuUnpackID, _("&Unpack\tF2"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuCompileID, _("C&ompile\tF3"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuInstallID, _("&Install\tF4"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuQmergeID, _("&Qmerge\tF5"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuEbuildID, _("&ebuild <this ebuild> command\tF9"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuEmergeID, _("e&merge this ebuild\tF10"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuRepoScanID, _("&Repoman scan"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuPatchID, _("Create patch from source in ${S}"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuImportID, _("&Import existing patch"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuDiffID, _("diff of this ebuild against PORTDIR version"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuRepoFullID, _("repoman full"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuFileCopyID, _("${FILESDIR} copy/diff/edit/del\tF8"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuXtermSID, _("xterm in ${S}\tF12"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuXtermDID, _("xterm in ${D}"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(mnuXtermCVSID, _("xterm in CVS dir\tShift-F12"), wxEmptyString, wxITEM_NORMAL);
    menubar->Append(wxglade_tmp_menu_3, _("&Tools"));
    wxMenu* wxglade_tmp_menu_4 = new wxMenu();
    wxglade_tmp_menu_4->Append(self.mnuFullCommitID, _("repoman cvs commit"), wxEmptyString, wxITEM_NORMAL);
    menubar->Append(wxglade_tmp_menu_4, _("&CVS"));
    wxMenu* wxglade_tmp_menu_5 = new wxMenu();
    wxglade_tmp_menu_5->Append(mnuEditID, _("&ebuild in external editor\tF7"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_5->Append(mnuViewMetadataID, _("metadata.&xml"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_5->Append(mnuViewChangeLogID, _("Change&Log"), wxEmptyString, wxITEM_NORMAL);
    menubar->Append(wxglade_tmp_menu_5, _("&View"));
    wxMenu* menu_options = new wxMenu();
    menu_options->Append(mnuClearLogID, _("&Clear log window\tF11"), wxEmptyString, wxITEM_NORMAL);
    menubar->Append(menu_options, _("Lo&g"));
    wxMenu* wxglade_tmp_menu_6 = new wxMenu();
    wxglade_tmp_menu_6->Append(mnuPrefID, _("&Preferences"), wxEmptyString, wxITEM_NORMAL);
    menubar->Append(wxglade_tmp_menu_6, _("&Options"));
    wxMenu* wxglade_tmp_menu_7 = new wxMenu();
    wxglade_tmp_menu_7->Append(mnuHelpID, _("&Contents"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_7->Append(mnuHelpRefID, _("Ebuild &Quick Reference"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_7->Append(mnuEclassID, _("&eclasses"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_7->Append(mnuPrivID, _("&Portage private functions"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_7->Append(mnuUseID, _("USE variables"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_7->Append(mnulocalUseID, _("&local USE variables"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_7->Append(mnuFKEYS_ID, _("List &Fkeys"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_7->Append(mnuCVS_ID, _("Gentoo repoman &CVS help"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_7->Append(mnuAboutID, _("&About Abeni"), wxEmptyString, wxITEM_NORMAL);
    menubar->Append(wxglade_tmp_menu_7, _("&Help"));
    SetMenuBar(menubar);
    statusbar = CreateStatusBar(2, 0);
    toolbar = new wxToolBar(this, -1, wxDefaultPosition, wxDefaultSize, wxTB_HORIZONTAL|wxTB_FLAT);
    SetToolBar(toolbar);
    toolbar->AddTool(newID, _("new"), wxBitmap("/usr/share/pixmaps/abeni/new.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("New ebuild"), wxEmptyString);
    toolbar->AddTool(openID, _("open"), wxBitmap("/usr/share/pixmaps/abeni/open.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("Open ebuild in PORTDIR"), wxEmptyString);
    toolbar->AddTool(openOvlID, _("openOvl"), wxBitmap("/usr/share/pixmaps/abeni/open_ovl.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("Open ebuild in PORTDIR_OVERLAY"), wxEmptyString);
    toolbar->AddTool(saveID, _("save"), wxBitmap("/usr/share/pixmaps/abeni/save.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("Save ebuild Ctrl-S"), wxEmptyString);
    toolbar->AddTool(editID, _("edit"), wxBitmap("/usr/share/pixmaps/abeni/edit.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("Edit ebuild in external editor F7"), wxEmptyString);
    toolbar->AddSeparator();
    toolbar->AddTool(newFuncID, _("newFunc"), wxBitmap("/usr/share/pixmaps/abeni/fx.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("New Function F6"), wxEmptyString);
    toolbar->AddTool(toolCleanID, _("clean"), wxBitmap("/usr/share/pixmaps/abeni/clean.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("Clean Shift-F1"), wxEmptyString);
    toolbar->AddTool(digestID, _("digest"), wxBitmap("/usr/share/pixmaps/abeni/digest.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("Digest F1"), wxEmptyString);
    toolbar->AddTool(unpackID, _("unpack"), wxBitmap("/usr/share/pixmaps/abeni/unpack.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("Unpack F2"), wxEmptyString);
    toolbar->AddTool(compileID, _("compile"), wxBitmap("/usr/share/pixmaps/abeni/compile.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("Compile F3"), wxEmptyString);
    toolbar->AddTool(installID, _("install"), wxBitmap("/usr/share/pixmaps/abeni/install.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("Install F4"), wxEmptyString);
    toolbar->AddTool(qmergeID, _("qmerge"), wxBitmap("/usr/share/pixmaps/abeni/qmerge.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("Qmerge F5"), wxEmptyString);
    toolbar->AddTool(ebuildID, _("ebuild"), wxBitmap("/usr/share/pixmaps/abeni/ebuild.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("ebuild <this ebuild> command F9"), wxEmptyString);
    toolbar->AddTool(emergeID, _("emerge"), wxBitmap("/usr/share/pixmaps/abeni/emerge.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("emerge <options><this ebuild> F10"), wxEmptyString);
    toolbar->AddTool(xtermID, _("xterm"), wxBitmap("/usr/share/pixmaps/abeni/xterm.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("Launch xterm in $S F12"), wxEmptyString);
    toolbar->AddSeparator();
    toolbar->AddTool(self.StopID, _("stop"), wxBitmap("/usr/share/pixmaps/abeni/stop.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _("Interrupt process running in log window"), wxEmptyString);
    toolbar->Realize();
    static_line_2 = new wxStaticLine(this, wxID_ANY);
    button_Category = new wxButton(panel_cpvr, wxID_ANY, _("Category"));
    text_ctrl_Category = new wxTextCtrl(panel_cpvr, wxID_ANY, wxEmptyString);
    label_PN = new wxStaticText(panel_cpvr, wxID_ANY, _("$PN"));
    text_ctrl_PN = new wxTextCtrl(panel_cpvr, wxID_ANY, wxEmptyString);
    label_PVR = new wxStaticText(panel_cpvr, wxID_ANY, _("$PVR"));
    text_ctrl_PVR = new wxTextCtrl(panel_cpvr, wxID_ANY, wxEmptyString);
    button_1 = new wxToggleButton(panel_cpvr, wxID_ANY, _("noauto"));
    static_line_3 = new wxStaticLine(panel_1, wxID_ANY);
    STCeditor = new GentooSTC(splitter, wxID_ANY);
    text_ctrl_log = new wxTextCtrl(panel_log, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    tree_ctrl_1 = new wxTreeCtrl(window_1_pane_1, treeID, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER);
    explorer = new wx.GenericDirCtrl(window_1_pane_2, wxID_ANY, filter="All files|*");
    button_view = new wxButton(window_1_pane_2, wxID_ANY, _("View"));
    button_edit = new wxButton(window_1_pane_2, wxID_ANY, _("Edit"));
    button_patch = new wxButton(window_1_pane_2, wxID_ANY, _("Create patch"));
    button_delete = new wxButton(window_1_pane_2, wxID_ANY, _("Delete"));
    text_ctrl_environment = new wxTextCtrl(panel_environment, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    button_env_refresh = new wxButton(panel_environment, wxID_ANY, _("Refresh"));
    const wxString radio_box_env_choices[] = {
        _("Brief"),
        _("Full")
    };
    radio_box_env = new wxRadioBox(panel_environment, wxID_ANY, _("View"), wxDefaultPosition, wxDefaultSize, 2, radio_box_env_choices, 1, wxRA_SPECIFY_ROWS);

    set_properties();
    do_layout();
    // end wxGlade
}


void MyFrame::set_properties()
{
    // begin wxGlade: MyFrame::set_properties
    SetTitle(_("Abeni"));
    wxIcon _icon;
    _icon.CopyFromBitmap(wxBitmap("/usr/share/pixmaps/abeni/abeni_logo16.png", wxBITMAP_TYPE_ANY));
    SetIcon(_icon);
    SetSize(wxSize(882, 696));
    int statusbar_widths[] = { -1, 400 };
    statusbar->SetStatusWidths(2, statusbar_widths);
    const wxString statusbar_fields[] = {
        wxEmptyString,
        wxEmptyString
    };
    for(int i = 0; i < statusbar->GetFieldsCount(); ++i) {
        statusbar->SetStatusText(statusbar_fields[i], i);
    }
    button_Category->Enable(0);
    text_ctrl_Category->SetToolTip(_("Select a category"));
    text_ctrl_Category->Enable(0);
    text_ctrl_PN->SetToolTip(_("Enter the Package Name"));
    text_ctrl_PN->Enable(0);
    text_ctrl_PVR->SetToolTip(_("Enter the Package Version"));
    text_ctrl_PVR->Enable(0);
    button_1->SetValue(1);
    radio_box_env->SetSelection(0);
    // end wxGlade
}


void MyFrame::do_layout()
{
    // begin wxGlade: MyFrame::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_13 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_14 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_9 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_11 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_12 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_10 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_7 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_8 = new wxBoxSizer(wxHORIZONTAL);
    sizer_1->Add(static_line_2, 0, wxEXPAND, 0);
    sizer_8->Add(button_Category, 0, wxRIGHT, 10);
    sizer_8->Add(text_ctrl_Category, 1, wxRIGHT|wxEXPAND, 16);
    sizer_5->Add(sizer_8, 1, wxEXPAND, 0);
    sizer_6->Add(label_PN, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 10);
    sizer_6->Add(text_ctrl_PN, 1, wxRIGHT|wxEXPAND, 16);
    sizer_5->Add(sizer_6, 1, wxEXPAND, 0);
    sizer_7->Add(label_PVR, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 10);
    sizer_7->Add(text_ctrl_PVR, 0, 0, 0);
    sizer_5->Add(sizer_7, 1, wxEXPAND, 0);
    sizer_5->Add(button_1, 0, wxFIXED_MINSIZE, 0);
    sizer_3->Add(sizer_5, 1, wxALL, 6);
    panel_cpvr->SetSizer(sizer_3);
    sizer_2->Add(panel_cpvr, 0, wxEXPAND, 0);
    sizer_2->Add(static_line_3, 0, wxEXPAND, 0);
    sizer_4->Add(text_ctrl_log, 1, wxEXPAND, 0);
    panel_log->SetSizer(sizer_4);
    sizer_10->Add(tree_ctrl_1, 1, wxEXPAND, 0);
    window_1_pane_1->SetSizer(sizer_10);
    sizer_11->Add(explorer, 1, wxEXPAND, 0);
    sizer_12->Add(button_view, 0, wxLEFT, 8);
    sizer_12->Add(button_edit, 0, wxLEFT, 8);
    sizer_12->Add(button_patch, 0, wxLEFT, 8);
    sizer_12->Add(button_delete, 0, wxLEFT, 8);
    sizer_11->Add(sizer_12, 0, wxEXPAND, 0);
    window_1_pane_2->SetSizer(sizer_11);
    window_1->SplitVertically(window_1_pane_1, window_1_pane_2);
    sizer_9->Add(window_1, 1, wxEXPAND, 0);
    panel_explorer->SetSizer(sizer_9);
    sizer_13->Add(text_ctrl_environment, 1, wxEXPAND, 0);
    sizer_14->Add(button_env_refresh, 0, wxALL, 10);
    sizer_14->Add(radio_box_env, 0, wxBOTTOM, 12);
    sizer_13->Add(sizer_14, 0, wxEXPAND, 0);
    panel_environment->SetSizer(sizer_13);
    notebook_1->AddPage(panel_log, _("Output"));
    notebook_1->AddPage(panel_explorer, _("Files"));
    notebook_1->AddPage(panel_environment, _("Environment"));
    splitter->SplitHorizontally(STCeditor, notebook_1);
    sizer_2->Add(splitter, 1, wxEXPAND, 0);
    panel_1->SetSizer(sizer_2);
    sizer_1->Add(panel_1, 1, wxEXPAND, 0);
    SetSizer(sizer_1);
    Layout();
    Centre();
    // end wxGlade
}

