# generated by wxGlade HG on Sat May 24 09:47:28 2014
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
use Wx::Locale gettext => '_T';
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package MyFrame;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;


sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: MyFrame::new
    $style = wxDEFAULT_FRAME_STYLE 
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    

    # Menu Bar

    $self->{menubar} = Wx::MenuBar->new();
    use constant mnuNewID => Wx::.NewId();
    use constant mnuLoadOverlayID => Wx::.NewId();
    use constant mnuLoadID => Wx::.NewId();
    use constant mnuSaveID => Wx::.NewId();
    use constant mnuDelID => Wx::.NewId();
    use constant mnuExportID => Wx::.NewId();
    use constant exitID => Wx::.NewId();
    use constant mnuFindID => Wx::.NewId();
    use constant mnuFindAgainID => Wx::.NewId();
    use constant mnuAddFuncID => Wx::.NewId();
    use constant mnuLicenseID => Wx::.NewId();
    use constant mnuCleanID => Wx::.NewId();
    use constant mnuDigestID => Wx::.NewId();
    use constant mnuUnpackID => Wx::.NewId();
    use constant mnuCompileID => Wx::.NewId();
    use constant mnuInstallID => Wx::.NewId();
    use constant mnuQmergeID => Wx::.NewId();
    use constant mnuEbuildID => Wx::.NewId();
    use constant mnuEmergeID => Wx::.NewId();
    use constant mnuRepoScanID => Wx::.NewId();
    use constant mnuPatchID => Wx::.NewId();
    use constant mnuImportID => Wx::.NewId();
    use constant mnuDiffID => Wx::.NewId();
    use constant mnuRepoFullID => Wx::.NewId();
    use constant mnuFileCopyID => Wx::.NewId();
    use constant mnuXtermSID => Wx::.NewId();
    use constant mnuXtermDID => Wx::.NewId();
    use constant mnuXtermCVSID => Wx::.NewId();
    use constant self.mnuFullCommitID => Wx::.NewId();
    use constant mnuEditID => Wx::.NewId();
    use constant mnuViewMetadataID => Wx::.NewId();
    use constant mnuViewChangeLogID => Wx::.NewId();
    use constant mnuClearLogID => Wx::.NewId();
    use constant mnuPrefID => Wx::.NewId();
    use constant mnuHelpID => Wx::.NewId();
    use constant mnuHelpRefID => Wx::.NewId();
    use constant mnuEclassID => Wx::.NewId();
    use constant mnuPrivID => Wx::.NewId();
    use constant mnuUseID => Wx::.NewId();
    use constant mnulocalUseID => Wx::.NewId();
    use constant mnuFKEYS_ID => Wx::.NewId();
    use constant mnuCVS_ID => Wx::.NewId();
    use constant mnuAboutID => Wx::.NewId();
    my $wxglade_tmp_menu;
    $self->{_T("fileMenu")} = Wx::Menu->new();
    $self->{_T("fileMenu")}->Append(mnuNewID, _T("&New ebuild\tCtrl-n"), "");
    $self->{_T("fileMenu")}->Append(mnuLoadOverlayID, _T("L&oad ebuild from PORTDIR_OVERLAY"), "");
    $self->{_T("fileMenu")}->Append(mnuLoadID, _T("&Load ebuild from PORTDIR"), "");
    $self->{_T("fileMenu")}->Append(mnuSaveID, _T("&Save ebuild\tCtrl-S"), "");
    $self->{_T("fileMenu")}->Append(mnuDelID, _T("&Delete this ebuild"), "");
    $self->{_T("fileMenu")}->Append(mnuExportID, _T("&Export ebuild and aux files to tar"), "");
    $self->{_T("fileMenu")}->Append(exitID, _T("E&xit\tAlt-X"), "");
    $self->{_T("menubar")}->Append($self->{_T("fileMenu")}, _T("&File"));
    $wxglade_tmp_menu = Wx::Menu->new();
    $wxglade_tmp_menu->Append(mnuFindID, _T("&Find\tCtrl-F"), "");
    $wxglade_tmp_menu->Append(mnuFindAgainID, _T("Find a&gain\tCtrl-g"), "");
    $self->{_T("menubar")}->Append($wxglade_tmp_menu, _T("&Edit"));
    $wxglade_tmp_menu = Wx::Menu->new();
    $wxglade_tmp_menu->Append(mnuAddFuncID, _T("&Function\tF6"), "");
    $wxglade_tmp_menu->Append(mnuLicenseID, _T("&License"), "");
    $self->{_T("menubar")}->Append($wxglade_tmp_menu, _T("&Insert"));
    $wxglade_tmp_menu = Wx::Menu->new();
    $wxglade_tmp_menu->Append(mnuCleanID, _T("&Clean\tShift-F1"), "");
    $wxglade_tmp_menu->Append(mnuDigestID, _T("&Digest\tF1"), "");
    $wxglade_tmp_menu->Append(mnuUnpackID, _T("&Unpack\tF2"), "");
    $wxglade_tmp_menu->Append(mnuCompileID, _T("C&ompile\tF3"), "");
    $wxglade_tmp_menu->Append(mnuInstallID, _T("&Install\tF4"), "");
    $wxglade_tmp_menu->Append(mnuQmergeID, _T("&Qmerge\tF5"), "");
    $wxglade_tmp_menu->Append(mnuEbuildID, _T("&ebuild <this ebuild> command\tF9"), "");
    $wxglade_tmp_menu->Append(mnuEmergeID, _T("e&merge this ebuild\tF10"), "");
    $wxglade_tmp_menu->Append(mnuRepoScanID, _T("&Repoman scan"), "");
    $wxglade_tmp_menu->Append(mnuPatchID, _T("Create patch from source in \${S}"), "");
    $wxglade_tmp_menu->Append(mnuImportID, _T("&Import existing patch"), "");
    $wxglade_tmp_menu->Append(mnuDiffID, _T("diff of this ebuild against PORTDIR version"), "");
    $wxglade_tmp_menu->Append(mnuRepoFullID, _T("repoman full"), "");
    $wxglade_tmp_menu->Append(mnuFileCopyID, _T("\${FILESDIR} copy/diff/edit/del\tF8"), "");
    $wxglade_tmp_menu->Append(mnuXtermSID, _T("xterm in \${S}\tF12"), "");
    $wxglade_tmp_menu->Append(mnuXtermDID, _T("xterm in \${D}"), "");
    $wxglade_tmp_menu->Append(mnuXtermCVSID, _T("xterm in CVS dir\tShift-F12"), "");
    $self->{_T("menubar")}->Append($wxglade_tmp_menu, _T("&Tools"));
    $wxglade_tmp_menu = Wx::Menu->new();
    $wxglade_tmp_menu->Append(self.mnuFullCommitID, _T("repoman cvs commit"), "");
    $self->{_T("menubar")}->Append($wxglade_tmp_menu, _T("&CVS"));
    $wxglade_tmp_menu = Wx::Menu->new();
    $wxglade_tmp_menu->Append(mnuEditID, _T("&ebuild in external editor\tF7"), "");
    $wxglade_tmp_menu->Append(mnuViewMetadataID, _T("metadata.&xml"), "");
    $wxglade_tmp_menu->Append(mnuViewChangeLogID, _T("Change&Log"), "");
    $self->{_T("menubar")}->Append($wxglade_tmp_menu, _T("&View"));
    $self->{_T("menu_options")} = Wx::Menu->new();
    $self->{_T("menu_options")}->Append(mnuClearLogID, _T("&Clear log window\tF11"), "");
    $self->{_T("menubar")}->Append($self->{_T("menu_options")}, _T("Lo&g"));
    $wxglade_tmp_menu = Wx::Menu->new();
    $wxglade_tmp_menu->Append(mnuPrefID, _T("&Preferences"), "");
    $self->{_T("menubar")}->Append($wxglade_tmp_menu, _T("&Options"));
    $wxglade_tmp_menu = Wx::Menu->new();
    $wxglade_tmp_menu->Append(mnuHelpID, _T("&Contents"), "");
    $wxglade_tmp_menu->Append(mnuHelpRefID, _T("Ebuild &Quick Reference"), "");
    $wxglade_tmp_menu->Append(mnuEclassID, _T("&eclasses"), "");
    $wxglade_tmp_menu->Append(mnuPrivID, _T("&Portage private functions"), "");
    $wxglade_tmp_menu->Append(mnuUseID, _T("USE variables"), "");
    $wxglade_tmp_menu->Append(mnulocalUseID, _T("&local USE variables"), "");
    $wxglade_tmp_menu->Append(mnuFKEYS_ID, _T("List &Fkeys"), "");
    $wxglade_tmp_menu->Append(mnuCVS_ID, _T("Gentoo repoman &CVS help"), "");
    $wxglade_tmp_menu->Append(mnuAboutID, _T("&About Abeni"), "");
    $self->{_T("menubar")}->Append($wxglade_tmp_menu, _T("&Help"));
    $self->SetMenuBar($self->{menubar});
    
# Menu Bar end

    $self->{statusbar} = $self->CreateStatusBar(2, 0);
    
# Tool Bar
    $self->{toolbar} = Wx::ToolBar->new($self, -1, wxDefaultPosition, wxDefaultSize, wxTB_HORIZONTAL|wxTB_FLAT);
    $self->SetToolBar($self->{toolbar});
    use constant newID => Wx::.NewId();
    use constant openID => Wx::.NewId();
    use constant openOvlID => Wx::.NewId();
    use constant saveID => Wx::.NewId();
    use constant editID => Wx::.NewId();
    use constant newFuncID => Wx::.NewId();
    use constant toolCleanID => Wx::.NewId();
    use constant digestID => Wx::.NewId();
    use constant unpackID => Wx::.NewId();
    use constant compileID => Wx::.NewId();
    use constant installID => Wx::.NewId();
    use constant qmergeID => Wx::.NewId();
    use constant ebuildID => Wx::.NewId();
    use constant emergeID => Wx::.NewId();
    use constant xtermID => Wx::.NewId();
    use constant self.StopID => Wx::.NewId();
    $self->{toolbar}->AddTool(newID, _T("new"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/new.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("New ebuild"), "");
    $self->{toolbar}->AddTool(openID, _T("open"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/open.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("Open ebuild in PORTDIR"), "");
    $self->{toolbar}->AddTool(openOvlID, _T("openOvl"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/open_ovl.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("Open ebuild in PORTDIR_OVERLAY"), "");
    $self->{toolbar}->AddTool(saveID, _T("save"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/save.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("Save ebuild Ctrl-S"), "");
    $self->{toolbar}->AddTool(editID, _T("edit"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/edit.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("Edit ebuild in external editor F7"), "");
    $self->{toolbar}->AddSeparator();
    $self->{toolbar}->AddTool(newFuncID, _T("newFunc"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/fx.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("New Function F6"), "");
    $self->{toolbar}->AddTool(toolCleanID, _T("clean"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/clean.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("Clean Shift-F1"), "");
    $self->{toolbar}->AddTool(digestID, _T("digest"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/digest.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("Digest F1"), "");
    $self->{toolbar}->AddTool(unpackID, _T("unpack"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/unpack.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("Unpack F2"), "");
    $self->{toolbar}->AddTool(compileID, _T("compile"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/compile.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("Compile F3"), "");
    $self->{toolbar}->AddTool(installID, _T("install"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/install.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("Install F4"), "");
    $self->{toolbar}->AddTool(qmergeID, _T("qmerge"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/qmerge.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("Qmerge F5"), "");
    $self->{toolbar}->AddTool(ebuildID, _T("ebuild"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/ebuild.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("ebuild <this ebuild> command F9"), "");
    $self->{toolbar}->AddTool(emergeID, _T("emerge"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/emerge.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("emerge <options><this ebuild> F10"), "");
    $self->{toolbar}->AddTool(xtermID, _T("xterm"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/xterm.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("Launch xterm in \$S F12"), "");
    $self->{toolbar}->AddSeparator();
    $self->{toolbar}->AddTool(self.StopID, _T("stop"), Wx::Bitmap->new("/usr/share/pixmaps/abeni/stop.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, _T("Interrupt process running in log window"), "");
    # Tool Bar end
    $self->{static_line_2} = Wx::StaticLine->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{panel_1} = Wx::Panel->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{panel_cpvr} = Wx::Panel->new($self->{panel_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{button_Category} = Wx::Button->new($self->{panel_cpvr}, wxID_ANY, _T("Category"));
    $self->{text_ctrl_Category} = Wx::TextCtrl->new($self->{panel_cpvr}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{label_PN} = Wx::StaticText->new($self->{panel_cpvr}, wxID_ANY, _T("\$PN"), wxDefaultPosition, wxDefaultSize, );
    $self->{text_ctrl_PN} = Wx::TextCtrl->new($self->{panel_cpvr}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{label_PVR} = Wx::StaticText->new($self->{panel_cpvr}, wxID_ANY, _T("\$PVR"), wxDefaultPosition, wxDefaultSize, );
    $self->{text_ctrl_PVR} = Wx::TextCtrl->new($self->{panel_cpvr}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{button_1} = Wx::ToggleButton->new($self->{panel_cpvr}, wxID_ANY, _T("noauto"));
    $self->{static_line_3} = Wx::StaticLine->new($self->{panel_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{splitter} = Wx::SplitterWindow->new($self->{panel_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3D|wxSP_BORDER);
    $self->{STCeditor} = GentooSTC->new($self->{splitter}, wxID_ANY);
    $self->{notebook_1} = Wx::Notebook->new($self->{splitter}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxNB_BOTTOM);
    $self->{panel_log} = Wx::Panel->new($self->{notebook_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{text_ctrl_log} = Wx::TextCtrl->new($self->{panel_log}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    $self->{panel_explorer} = Wx::Panel->new($self->{notebook_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{window_1} = Wx::SplitterWindow->new($self->{panel_explorer}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3DBORDER|wxSP_BORDER);
    $self->{window_1_pane_1} = Wx::Panel->new($self->{window_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    use constant treeID => Wx::.NewId();
    $self->{tree_ctrl_1} = Wx::TreeCtrl->new($self->{window_1_pane_1}, treeID, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER);
    $self->{window_1_pane_2} = Wx::Panel->new($self->{window_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{explorer} = wx.GenericDirCtrl->new($self->{window_1_pane_2}, wxID_ANY, filter="All files|*");
    $self->{button_view} = Wx::Button->new($self->{window_1_pane_2}, wxID_ANY, _T("View"));
    $self->{button_edit} = Wx::Button->new($self->{window_1_pane_2}, wxID_ANY, _T("Edit"));
    $self->{button_patch} = Wx::Button->new($self->{window_1_pane_2}, wxID_ANY, _T("Create patch"));
    $self->{button_delete} = Wx::Button->new($self->{window_1_pane_2}, wxID_ANY, _T("Delete"));
    $self->{panel_environment} = Wx::Panel->new($self->{notebook_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{text_ctrl_environment} = Wx::TextCtrl->new($self->{panel_environment}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    $self->{button_env_refresh} = Wx::Button->new($self->{panel_environment}, wxID_ANY, _T("Refresh"));
    $self->{radio_box_env} = Wx::RadioBox->new($self->{panel_environment}, wxID_ANY, _T("View"), wxDefaultPosition, wxDefaultSize, [_T("Brief"), _T("Full")], 1, wxRA_SPECIFY_ROWS);

    $self->__set_properties();
    $self->__do_layout();

    # end wxGlade
    return $self;

}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: MyFrame::__set_properties
    $self->SetTitle(_T("Abeni"));
    my $icon = Wx::Icon->new();
    $icon->CopyFromBitmap(Wx::Bitmap->new(_T("/usr/share/pixmaps/abeni/abeni_logo16.png"), wxBITMAP_TYPE_ANY));
    $self->SetIcon($icon);
    $self->SetSize(Wx::Size->new(882, 696));
    $self->{statusbar}->SetStatusWidths(-1,400);

    my( @statusbar_fields ) = (
        "",
        ""
    );

    if( @statusbar_fields ) {
        $self->{statusbar}->SetStatusText($statusbar_fields[$_], $_)
        for 0 .. $#statusbar_fields ;
    }
    $self->{toolbar}->Realize();
    $self->{button_Category}->Enable(0);
    $self->{text_ctrl_Category}->SetToolTipString(_T("Select a category"));
    $self->{text_ctrl_Category}->Enable(0);
    $self->{text_ctrl_PN}->SetToolTipString(_T("Enter the Package Name"));
    $self->{text_ctrl_PN}->Enable(0);
    $self->{text_ctrl_PVR}->SetToolTipString(_T("Enter the Package Version"));
    $self->{text_ctrl_PVR}->Enable(0);
    $self->{button_1}->SetValue(1);
    $self->{radio_box_env}->SetSelection(0);
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: MyFrame::__do_layout
    $self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_2} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_13} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_14} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_9} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_11} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_12} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_10} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_4} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_3} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_5} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_7} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_6} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_8} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_1}->Add($self->{static_line_2}, 0, wxEXPAND, 0);
    $self->{sizer_8}->Add($self->{button_Category}, 0, wxRIGHT, 10);
    $self->{sizer_8}->Add($self->{text_ctrl_Category}, 1, wxRIGHT|wxEXPAND, 16);
    $self->{sizer_5}->Add($self->{sizer_8}, 1, wxEXPAND, 0);
    $self->{sizer_6}->Add($self->{label_PN}, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 10);
    $self->{sizer_6}->Add($self->{text_ctrl_PN}, 1, wxRIGHT|wxEXPAND, 16);
    $self->{sizer_5}->Add($self->{sizer_6}, 1, wxEXPAND, 0);
    $self->{sizer_7}->Add($self->{label_PVR}, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 10);
    $self->{sizer_7}->Add($self->{text_ctrl_PVR}, 0, 0, 0);
    $self->{sizer_5}->Add($self->{sizer_7}, 1, wxEXPAND, 0);
    $self->{sizer_5}->Add($self->{button_1}, 0, wxFIXED_MINSIZE, 0);
    $self->{sizer_3}->Add($self->{sizer_5}, 1, wxALL, 6);
    $self->{panel_cpvr}->SetSizer($self->{sizer_3});
    $self->{sizer_2}->Add($self->{panel_cpvr}, 0, wxEXPAND, 0);
    $self->{sizer_2}->Add($self->{static_line_3}, 0, wxEXPAND, 0);
    $self->{sizer_4}->Add($self->{text_ctrl_log}, 1, wxEXPAND, 0);
    $self->{panel_log}->SetSizer($self->{sizer_4});
    $self->{sizer_10}->Add($self->{tree_ctrl_1}, 1, wxEXPAND, 0);
    $self->{window_1_pane_1}->SetSizer($self->{sizer_10});
    $self->{sizer_11}->Add($self->{explorer}, 1, wxEXPAND, 0);
    $self->{sizer_12}->Add($self->{button_view}, 0, wxLEFT, 8);
    $self->{sizer_12}->Add($self->{button_edit}, 0, wxLEFT, 8);
    $self->{sizer_12}->Add($self->{button_patch}, 0, wxLEFT, 8);
    $self->{sizer_12}->Add($self->{button_delete}, 0, wxLEFT, 8);
    $self->{sizer_11}->Add($self->{sizer_12}, 0, wxEXPAND, 0);
    $self->{window_1_pane_2}->SetSizer($self->{sizer_11});
    $self->{window_1}->SplitVertically($self->{window_1_pane_1}, $self->{window_1_pane_2}, );
    $self->{sizer_9}->Add($self->{window_1}, 1, wxEXPAND, 0);
    $self->{panel_explorer}->SetSizer($self->{sizer_9});
    $self->{sizer_13}->Add($self->{text_ctrl_environment}, 1, wxEXPAND, 0);
    $self->{sizer_14}->Add($self->{button_env_refresh}, 0, wxALL, 10);
    $self->{sizer_14}->Add($self->{radio_box_env}, 0, wxBOTTOM, 12);
    $self->{sizer_13}->Add($self->{sizer_14}, 0, wxEXPAND, 0);
    $self->{panel_environment}->SetSizer($self->{sizer_13});
    $self->{notebook_1}->AddPage($self->{panel_log}, _T("Output"));
    $self->{notebook_1}->AddPage($self->{panel_explorer}, _T("Files"));
    $self->{notebook_1}->AddPage($self->{panel_environment}, _T("Environment"));
    $self->{splitter}->SplitHorizontally($self->{STCeditor}, $self->{notebook_1}, );
    $self->{sizer_2}->Add($self->{splitter}, 1, wxEXPAND, 0);
    $self->{panel_1}->SetSizer($self->{sizer_2});
    $self->{sizer_1}->Add($self->{panel_1}, 1, wxEXPAND, 0);
    $self->SetSizer($self->{sizer_1});
    $self->Layout();
    $self->Centre();
    # end wxGlade
}

# end of class MyFrame

1;

